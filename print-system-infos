#!/usr/bin/env bash

# Copyright (c) 2024, 2025 acrion innovations GmbH
# Authors: Stefan Zipproth, s.zipproth@acrion.ch
#
# This file is part of ditana-print-system-infos, see https://github.com/acrion/ditana-print-system-infos
#
# ditana-print-system-infos is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ditana-print-system-infos is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with ditana-print-system-infos. If not, see <https://www.gnu.org/licenses/>.

collect_output() {
    output_container+=("$1")
}

print_aligned_output() {
    local column_length="$1"
    local total_items="${#output_container[@]}"
    local second_column_start=$(( column_length ))
    local CYAN=$'\033[0;36m'
    local RESET=$'\033[0m'

    strip_ansi() {
        echo "$1" | sed -r 's/\x1B\[[0-9;]*[a-zA-Z]//g'
    }

    local max_length=0

    for ((i = 0; i < column_length && i < total_items; i++)); do
        local key="${output_container[i]%%:*}"
        local value="${output_container[i]#*: }"
        local formatted="${CYAN}${key}${RESET}"
        [[ -n "$key" ]] && formatted+=": ${value}"

        local stripped
        stripped=$(strip_ansi "$formatted")
        local len=${#stripped}
        (( len > max_length )) && max_length=$len
    done

    local max_length_second=0
    for ((i = second_column_start; i < total_items; i++)); do
        local key="${output_container[i]%%:*}"
        local value="${output_container[i]#*: }"
        local formatted="${CYAN}${key}${RESET}"
        [[ -n "$key" ]] && formatted+=": ${value}"

        local stripped
        stripped=$(strip_ansi "$formatted")
        local len=${#stripped}
        (( len > max_length_second )) && max_length_second=$len
    done

    local terminal_width=$(tput cols)
    local spacing=2
    local required_width_two_columns=$(( max_length + spacing + max_length_second ))

    if (( required_width_two_columns > terminal_width )); then
        second_column_start=$(( total_items + 1 ))
    fi

    for ((i = 0; i < column_length || i + second_column_start < total_items; i++)); do
        local first_column=""
        local second_column=""

        (( i < column_length && i < total_items )) && first_column=${output_container[i]}
        (( i + second_column_start < total_items )) && second_column=${output_container[i + second_column_start]}

        local key1="${first_column%%:*}"
        local value1="${first_column#*: }"
        local key2="${second_column%%:*}"
        local value2="${second_column#*: }"

        local formatted_first_column="${CYAN}${key1}${RESET}"
        [[ -n "$key1" ]] && formatted_first_column+=": ${value1}"

        local formatted_second_column="${CYAN}${key2}${RESET}"
        [[ -n "$key2" ]] && formatted_second_column+=": ${value2}"

        local visible_len
        visible_len=$(strip_ansi "$formatted_first_column")
        local visible_len_length=${#visible_len}

        local total_len=${#formatted_first_column}
        local padding=$((max_length + total_len - visible_len_length))

        printf "%-${padding}s" "$formatted_first_column"
        [[ -n "$second_column" ]] && printf "%*s" $spacing ""
        printf "%s\n" "$formatted_second_column"
    done
}

list_kernel_params() {
    PARAMS=$(cat /proc/cmdline)

    declare -A KEY_MAP=(
        ["fw_devlink"]="Allow flexible device initialization"
        ["init_on_alloc"]="Automatically fill allocated memory with 0"
        ["init_on_free"]="Automatically fill deallocated memory with 0"
        ["mitigations"]="Security Mitigations"
        ["ibt"]="Intel Branch Target Injection Mitigation"
        ["zswap.enabled"]="Zswap Cache Layer"
        ["audit"]="Audit System"
        ["spectre_v2"]="Spectre Variant 2 Mitigation"
        ["l1tf"]="L1 Terminal Fault Mitigation"
        ["mds"]="MDS Mitigation"
        ["tsx_async_abort"]="TSX Async Abort Mitigation"
        ["l1d_flush"]="Meltdown Mitigation"
        ["mmio_stale_data"]="MMIO Stale Data Mitigation"
        ["retbleed"]="Retbleed Mitigation"
        ["spec_rstack_overflow"]="SRSO Mitigation"
        ["gather_data_sampling"]="Gather Data Sampling Mitigation"
        ["reg_file_data_sampling"]="RFDS Mitigation"
        ["ibt"]="Intel IBT Mitigation"
        ["pti"]="Page Table Isolation"
        ["page_alloc.shuffle"]="Randomize Physical Memory Allocation"
    )
    declare -A VALUE_MAP=(
        ["1"]="enabled"
        ["0"]="disabled"
        ["on"]="enabled"
        ["off"]="disabled"
        ["auto,nosmt"]="Hyperthreading disabled"
    )

    declare -A FILTER_MAP=(
        ["rw"]=1
        ["BOOT_IMAGE"]=1
        ["root"]=1
        ["nvidia-drm.modeset"]=1
        ["rd.luks.name"]=1
        ["rootflags"]=1
        ["spl_hostid"]=1
        ["spl.spl_hostid"]=1
        ["zfs"]=1
        ["audit_backlog_limit"]=1
    )

    OUTPUT_LINES=()

    for param in $PARAMS; do
        key="${param%%=*}"
        value="${param#*=}"

        [[ -n "${FILTER_MAP[$key]}" ]] && continue

        key="${KEY_MAP[$key]:-$key}"
        value="${VALUE_MAP[$value]:-$value}"

        key_padded=$(printf "%s:" "$key")
        key_padded=$(printf "%-46s" "$key_padded")
        OUTPUT_LINES+=("$(printf "%s%s" "$key_padded" "$value")")
    done

    mapfile -t sorted_lines < <(printf '%s\n' "${OUTPUT_LINES[@]}" | sort -f)

    for line in "${sorted_lines[@]}"; do
        collect_output "$line"
    done
}

safe_sysctl() {
    local param=$1
    sysctl -n "$param" 2>/dev/null
    local s=$?

    if [[ $s -eq 255 ]]; then
        echo "Parameter '$param' not available in kernel $(uname -r)"
        return $s
    elif [[ $s -ne 0 ]]; then
        echo "Error $s while retrieving '$param'"
        return $s
    fi
}

evaluate_boolean_sysctl() {
    local result=$(safe_sysctl "$1")
    local s=$?

    if [[ $s -ne 0 ]]; then
        echo "$result"
    elif [[ "$result" == "0" ]]; then
        echo "deactivated"
    elif [[ "$result" == "1" ]]; then
        echo "activated"
    else
        echo "partially"
    fi
}

if [[ -e "/proc/device-tree/model" ]]; then
    computer_model=$(cat /proc/device-tree/model | tr -d '\000')
else
    computer_model="$(cat /sys/devices/virtual/dmi/id/sys_vendor) $(cat /sys/devices/virtual/dmi/id/product_name)"
fi

get_window_manager() {
    if [[ "$XDG_SESSION_TYPE" = "x11" ]] && command -v xprop &>/dev/null; then
        wm_name=$(xprop -root _NET_SUPPORTING_WM_CHECK 2>/dev/null | awk 'NR==1 {print $NF}' | xargs -I{} xprop -id {} _NET_WM_NAME 2>/dev/null | awk -F '"' '{print $2}')
    fi

    if [[ -z "$wm_name" ]]; then
        wm_name="$(ps -e | grep -o -E 'xfwm4|openbox|kwin|mutter|i3|sway|awesome|compiz|fluxbox|jwm|icewm|dwm|xmonad|herbstluftwm|wmaker|ratpoison|fvwm' | head -n 1)"
    fi

    echo "${wm_name:-none}"
}

check_hyperthreading() {
    local threads_per_core
    threads_per_core=$(LC_MESSAGES=C.UTF-8 lscpu | awk '/Thread\(s\) per core/ {print $4}')

    if [[ "$threads_per_core" -eq 1 ]]; then
        echo "disabled"
    elif [[ -n "$threads_per_core" ]]; then
        echo "enabled"
    else
        echo "not detectable"
    fi
}

source /etc/os-release
collect_output "Computer model: $computer_model"
if command -v lspci > /dev/null; then
    graphics_info="$(lspci -mm -v -d ::0300 2>/dev/null)"
    vendor=""
    device=""
    
    while IFS= read -r line; do
        if [[ $line =~ ^Vendor:.*$ ]]; then
            vendor=${line#*:}
            vendor=${vendor## }
            vendor=${vendor/% Corporation/}
            vendor="${vendor#"${vendor%%[![:space:]]*}"}"
            vendor="${vendor%"${vendor##*[![:space:]]}"}"
        elif [[ $line =~ ^Device:.*$ ]]; then
            device=${line#*:}
            device=${device## }
            device=${device// Core/}
            device=${device// Processor/}
            device=${device// Graphics/}
            device=${device// Controller/}
            device=${device//[[\]]/}
            device="${device#"${device%%[![:space:]]*}"}"
            device="${device%"${device##*[![:space:]]}"}"
            collect_output "Graphics card:  $vendor $device"
        fi
    done <<< "$graphics_info"
fi
collect_output "CPU:            $(grep ^model\\sname /proc/cpuinfo | uniq | awk -F: '{print substr($2, 2)}' | sed 's/(R)//g; s/(TM)//g')"
collect_output
collect_output "Linux distribution:      $PRETTY_NAME"
if command -v lsb_release > /dev/null; then
    collect_output "Codename:                $(lsb_release -cs)"
fi
if [[ -z "$ID_LIKE" ]]; then
    collect_output "Distro family:           n/a"
else
    collect_output "Distro family:           $ID_LIKE"
fi
collect_output "Hostname:                $(hostname)"
collect_output "Physical CPU cores:      $(grep ^cpu\\scores /proc/cpuinfo | uniq | awk '{print $4}')"
collect_output "Hyperthreading (SMT):    $(check_hyperthreading)"
collect_output "Total RAM:               $(free -g | head -n 2 | tail -n +2 | tr -s ' ' | cut -d ' ' -f 2) GiB"
collect_output "Linux kernel version:    $(uname -r)"
collect_output "GNU C Library version:   $(ldd --version | head -n 1 | awk '{print $NF}')"
if command -v pkg-config > /dev/null; then
    GTK_VERSION=$(pkg-config --modversion gtk4 2>/dev/null)
    if [[ -n "$GTK_VERSION" ]]; then
        collect_output "GTK version:             $GTK_VERSION"
    fi
fi
collect_output "Shell:                   $($SHELL --version | head -n 1 | sed 's/ ([^)]*)$//')"
collect_output "Display Server Protocol: ${XDG_SESSION_TYPE:-none}"
collect_output "Window Manager:          $(get_window_manager)"
collect_output "Desktop Environment:     ${XDG_CURRENT_DESKTOP:-none}"

LEN_FIRST_COLUMN="${#output_container[@]}"

collect_output "Alt+SysRq+<b/e/f/s/u>:                        $(evaluate_boolean_sysctl kernel.sysrq)"
collect_output "Background Reclaiming of fs cache (0..100..): $(safe_sysctl vm.vfs_cache_pressure)"
collect_output "Background Memory Compaction (0..100):        $(safe_sysctl vm.compaction_proactiveness)"
collect_output "Swappiness (0..200):                          $(safe_sysctl vm.swappiness)"
collect_output "Swap Readahead (0..):                         $(safe_sysctl vm.page-cluster)"
collect_output "Extra Memory Reclaim (0..):                   $(safe_sysctl vm.watermark_boost_factor)"
collect_output "Maintain free memory (0..3000):               $(safe_sysctl vm.watermark_scale_factor)"
collect_output "Unprivileged Container Access:                $(evaluate_boolean_sysctl kernel.unprivileged_userns_clone)"
collect_output "Allow Performance Profiling:                  $(evaluate_boolean_sysctl kernel.perf_event_paranoid)"
list_kernel_params

print_aligned_output "$LEN_FIRST_COLUMN"
